<html>
<head>
<title>simplegl demo</title>
<script src="math.js"></script>
<script src="gl.js"></script>
</head>
<body onload="main()" style="background-color: #000000;">
<canvas id="canvas" style="position: absolute; touch-action: none; left: 0px; bottom: 0px;"></canvas>
<script>
const CAM_NEAR = 0.1;
const CAM_FAR = 100;
const CAM_FOVY = 67 * DEGRAD;

var canvas, gl, camera, shader, model;

var keyState = {};
var mouseState = {};
var mouseLook = false, mouseX = 0, mouseY = 0;

canvas = document.getElementById("canvas");

function main()
{
	gl = canvas.getContext("webgl2");
	camera = new Camera();
	
	gl.enable(this.gl.DEPTH_TEST);
	gl.enable(this.gl.BLEND);
	gl.enable(this.gl.CULL_FACE);
	gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
	document.body.onresize();
		
	shader = createDefaultShader(gl, 1, 1);
	
	var dlight = new DirectionalLight();
	dlight.direction.set(-1, -0.8, -0.2);
	dlight.ambient.set(0.4, 0.4, 0.4);
	dlight.specular.set(V1);
	shader.setUniformDirectionalLightEnable(true);
	shader.setUniformDirectionalLight(dlight);
	
	var mat = new Material();
	var tex = new Texture(gl, "bonzi.png");
	mat.ambientTexture = tex;
	mat.diffuseTexture = tex;
	mat.ambientTextureEnable = true;
	mat.diffuseTextureEnable = true;
	
	var vbuf = new Array(24);
	var ibuf = new Array(36);
	
	var hw = 0.5;
	var hh = 0.5;
	var hd = 0.5;
	
	vbuf[ 0] = new Vertex(new Vector3(-hw, -hh,  hd), VZ,  0, 1); //BL  front
	vbuf[ 1] = new Vertex(new Vector3( hw, -hh,  hd), VZ,  1, 1); //BR
	vbuf[ 2] = new Vertex(new Vector3(-hw,  hh,  hd), VZ,  0, 0); //TL
	vbuf[ 3] = new Vertex(new Vector3( hw,  hh,  hd), VZ,  1, 0); //TR
	
	vbuf[ 4] = new Vertex(new Vector3(-hw, -hh, -hd), VNZ, 1, 1); //BR  back
	vbuf[ 5] = new Vertex(new Vector3( hw, -hh, -hd), VNZ, 0, 1); //BL
	vbuf[ 6] = new Vertex(new Vector3(-hw,  hh, -hd), VNZ, 1, 0); //TR
	vbuf[ 7] = new Vertex(new Vector3( hw,  hh, -hd), VNZ, 0, 0); //TL
	
	vbuf[ 8] = new Vertex(new Vector3(-hw, -hh, -hd), VNX, 0, 1); //BL  left
	vbuf[ 9] = new Vertex(new Vector3(-hw, -hh,  hd), VNX, 1, 1); //BR
	vbuf[10] = new Vertex(new Vector3(-hw,  hh, -hd), VNX, 0, 0); //TL
	vbuf[11] = new Vertex(new Vector3(-hw,  hh,  hd), VNX, 1, 0); //TR
	
	vbuf[12] = new Vertex(new Vector3( hw, -hh, -hd), VX,  1, 1); //BR  right
	vbuf[13] = new Vertex(new Vector3( hw, -hh,  hd), VX,  0, 1); //BL
	vbuf[14] = new Vertex(new Vector3( hw,  hh, -hd), VX,  1, 0); //TR
	vbuf[15] = new Vertex(new Vector3( hw,  hh,  hd), VX,  0, 0); //TL
	
	vbuf[16] = new Vertex(new Vector3(-hw,  hh,  hd), VY,  0, 1); //BL  top
	vbuf[17] = new Vertex(new Vector3( hw,  hh,  hd), VY,  1, 1); //BR
	vbuf[18] = new Vertex(new Vector3(-hw,  hh, -hd), VY,  0, 0); //TL
	vbuf[19] = new Vertex(new Vector3( hw,  hh, -hd), VY,  1, 0); //TR
	
	vbuf[20] = new Vertex(new Vector3(-hw, -hh,  hd), VNY, 0, 0); //TL  bottom
	vbuf[21] = new Vertex(new Vector3( hw, -hh,  hd), VNY, 1, 0); //TR
	vbuf[22] = new Vertex(new Vector3(-hw, -hh, -hd), VNY, 0, 1); //BL
	vbuf[23] = new Vertex(new Vector3( hw, -hh, -hd), VNY, 1, 1); //BR
	
	ibuf[ 0] = 0;  ibuf[ 1] = 1;  ibuf[ 2] = 2; //front
	ibuf[ 3] = 3;  ibuf[ 4] = 2;  ibuf[ 5] = 1;
	ibuf[ 6] = 6;  ibuf[ 7] = 5;  ibuf[ 8] = 4; //back
	ibuf[ 9] = 5;  ibuf[10] = 6;  ibuf[11] = 7;
	ibuf[12] = 8;  ibuf[13] = 9;  ibuf[14] = 10; //left
	ibuf[15] = 11; ibuf[16] = 10; ibuf[17] = 9;
	ibuf[18] = 14; ibuf[19] = 13; ibuf[20] = 12; //right
	ibuf[21] = 13; ibuf[22] = 14; ibuf[23] = 15;
	ibuf[24] = 16; ibuf[25] = 17; ibuf[26] = 18; //top
	ibuf[27] = 19; ibuf[28] = 18; ibuf[29] = 17;
	ibuf[30] = 22; ibuf[31] = 21; ibuf[32] = 20; //bottom
	ibuf[33] = 21; ibuf[34] = 22; ibuf[35] = 23;
	
	var mesh = new Mesh(gl, vbuf, ibuf);
	var matmesh = new MatMesh(mat, mesh);
	model = new Model(matmesh);
	model.transform.setTranslation(new Vector3(0, 0, -3));
	
	requestAnimationFrame(draw);
}

function draw()
{
	requestAnimationFrame(draw);
	
	gl.clearColor(0, 0, 0, 1);
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	
	if(mouseLook) camera.calculateFPSView(keyState, mouseX, mouseY);
	shader.setUniformCamera(camera);
	
	model.transform.rotate(VY, getDeltaSpeed(1) * DEGRAD);
	shader.render(model);
	
	updateDeltaTime();
}

document.body.onresize = function()
{
	canvas.width = innerWidth;
	canvas.height = innerHeight;
	
	gl.viewport(0, 0, innerWidth, innerHeight);
	camera.projection.setPerspective(CAM_NEAR, CAM_FAR, CAM_FOVY, innerWidth / innerHeight);
}

document.body.oncontextmenu = function()
{
	return false;
}

document.onpointerlockchange = function()
{
	keyState = {};
	mouseState = {};
	mouseLook = document.pointerLockElement == canvas;
	
	if(mouseLook)
	{
		camera.prvx = mouseX;
		camera.prvy = mouseY;
	}
};

document.onkeydown = function(e)
{
	keyState[e.key.toLowerCase()] = true;
};

document.onkeyup = function(e)
{
	keyState[e.key.toLowerCase()] = false;
};

canvas.onpointerdown = function(e)
{
	mouseState[e.button] = true;
	
	canvas.requestPointerLock();
	canvas.onpointermove(e);
};

canvas.onpointerup = function(e)
{
	mouseState[e.button] = false;
};

canvas.onpointermove = function(e)
{
	mouseX += e.movementX;
	mouseY += e.movementY;
};

window.onfocus = function()
{
	keyState = {};
	mouseState = {};
};

window.onblur = function()
{
	keyState = {};
	mouseState = {};
};

</script>
</body>
</html>
